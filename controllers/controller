const UserService = require("../services/userService");

class UserController {
  constructor(redisClient) {
    this.userService = new UserService(redisClient);
    if (redisClient && redisClient.isOpen !== undefined) {
      console.log(
        "✅ [UserController] Redis client is open:",
        redisClient.isOpen
      );
    } else {
      console.log(
        "❌ [UserController] Redis client is undefined or not ready!"
      );
    }
  }

  async signup(req, res) {
    try {
      const {
        username,
        email,
        password,
        birthday,
        bio,
        unit,
        team,
        releaseDay,
        role,
        gender,
      } = req.body;

      let profilePhoto;
      if (req.file) {
        const mimeType = req.file.mimetype; // e.g., 'image/jpeg'
        const base64 = req.file.buffer.toString("base64");
        profilePhoto = `data:${mimeType};base64,${base64}`;
      }

      const userData = {
        username,
        email,
        password,
        birthday,
        bio,
        unit,
        team,
        releaseDay,
        role,
        gender,
        profilePhoto,
      };

      console.log("Saving user:", userData);
      const newUser = await this.userService.signup(userData);
      res
        .status(201)
        .json({ message: "User added successfully", user: newUser });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }
  async getUser(req, res) {
    try {
      let { username } = req.params;
      console.log("trying to get user: ", username);
      const user = await this.userService.getUser(username);
      console.log("200 user");
      res.status(200).json({ message: "User fetched successfully", user });
    } catch (error) {
      console.error("Error in controller:", error);
      console.log("500 user");
      res.status(500).json({ message: "Failed to get user", error });
    }
  }

  async addPostToUser(req, res) {
    try {
      const userId = req.user.id;
      const { photos, description } = req.body;
      const post = await this.userService.addPostToUser(userId, {
        photos,
        description,
      });
      res.status(201).json({
        message: "Post created and added to user successfully!",
        post,
      });
    } catch (error) {
      console.error("Error in controller:", error);
      res.status(500).json({ message: "Failed to add post", error });
    }
  }
  setRefreshTokenCookie(res, refreshToken) {
    res.cookie("refreshToken", refreshToken, {
      httpOnly: true,
      secure: false,
      sameSite: "Strict",
      path: "/user",
    });
  }
  setAccessToken(res, accessToken) {
    res.setHeader("Authorization", `Bearer ${accessToken}`);
    res.setHeader("Access-Control-Expose-Headers", "Authorization");
  }
  async login(req, res) {
    try {
      const { username, password } = req.body;
      if (!username || !password) {
        return res
          .status(400)
          .json({ message: "Username and password are required" });
      }
      const { accessToken, refreshToken } = await this.userService.login(
        username,
        password
      );
      console.log("User connected: ", username);
      console.log({ accessToken, refreshToken });
      this.setAccessToken(res, accessToken);
      this.setRefreshTokenCookie(res, refreshToken);

      res.status(200).json({ message: "Login successful" });
    } catch (error) {
      console.error("Error during login:", error.message);
      res
        .status(error.statusCode || 500)
        .json({ message: error.message || "An error occurred during login" });
    }
  }

  async authenticateAccessToken(req, res, next) {
    try {
      console.log("**********************************************");
      console.log("AUTHENTICATION STARTED...", req.method, req.originalUrl);
      const authHeader = req.headers["authorization"];
      const accessToken = authHeader && authHeader.split(" ")[1];
      console.log("GOT ACCESS TOKEN: ", accessToken);
      if (!accessToken) {
        return res.status(400).json({ message: "No token was given" });
      }
      req.user = await this.userService.authenticateAccessToken(accessToken);
      console.log("DONE AUTHENTICATION!");
      console.log("**********************************************");
      next();
    } catch (err) {
      console.log("GOT ERROR DURING AUTHENTICATION: ", err.message);
      if (err.message === process.env.ACCESS_TOKEN_EXPIRED_ERROR) {
        const { newAccessToken, newRefreshToken } = await this.refreshUserToken(
          req
        );

        res.setHeader("Authorization", `Bearer ${newAccessToken}`);
        res.setHeader("Access-Control-Expose-Headers", "Authorization");

        this.setRefreshTokenCookie(res, newRefreshToken);

        req.user = await this.userService.authenticateAccessToken(
          newAccessToken
        );
        console.log("NEW ACCESS-TOKEN: ", newAccessToken);
        return next();
      }

      return res
        .status(403)
        .json({ message: err.message || "Authentication failed" });
    }
  }

  async refreshUserToken(req) {
    console.log("controller refresh");
    const refreshToken = req.cookies.refreshToken;
    console.log("refresh: ", refreshToken);
    if (!refreshToken) {
      throw new Error("No refresh token provided");
    }

    const { newAccessToken, newRefreshToken } =
      await this.userService.refreshToken(refreshToken);
    return { newAccessToken, newRefreshToken };
  }
  catch(error) {
    res.status(403).json({
      message: error.message || "Failed to refresh token",
    });
  }
}

module.exports = UserController;
