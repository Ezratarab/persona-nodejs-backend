const UserService = require("../services/userService");
const fs = require("fs").promises; // Use promise-based fs

class UserController {
  constructor(redisClient) {
    this.userService = new UserService(redisClient);
    if (redisClient && redisClient.isOpen !== undefined) {
      console.log(
        "✅ [UserController] Redis client is open:",
        redisClient.isOpen
      );
    } else {
      console.log(
        "❌ [UserController] Redis client is undefined or not ready!"
      );
    }
  }

  async signup(req, res) {
    try {
      const {
        username,
        email,
        password,
        birthday,
        bio,
        unit,
        team,
        releaseDay,
        role,
        gender,
      } = req.body;

      let profilePhoto;
      if (req.file) {
        const mimeType = req.file.mimetype; // e.g., 'image/jpeg'
        const base64 = req.file.buffer.toString("base64");
        profilePhoto = `data:${mimeType};base64,${base64}`;
      }

      const userData = {
        username,
        email,
        password,
        birthday,
        bio,
        unit,
        team,
        releaseDay,
        role,
        gender,
        profilePhoto,
      };

      console.log("Saving user:", userData);
      const newUser = await this.userService.signup(userData);
      res
        .status(201)
        .json({ message: "User added successfully", user: newUser });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }

  async uploadPost(req, res) {
    try {
      const { username, description, location } = req.body;
      const author = await this.userService.getUser(username);

      // Convert each uploaded file to base64 string
      const photos = await Promise.all(
        (req.files || []).map(async (file) => {
          const fileData = await fs.readFile(file.path); // Read from disk
          const base64 = fileData.toString("base64");
          return `data:${file.mimetype};base64,${base64}`;
        })
      );

      const postData = {
        author,
        photos,
        description,
        location,
      };

      const newPost = await this.userService.addPostToUser(postData);

      res.status(201).json({
        message: "Post was added successfully",
        post: newPost,
      });
    } catch (error) {
      console.error("uploadPost error:", error);
      res.status(500).json({ error: error.message });
    }
  }

  async addLikeToPost(req, res) {
    try {
      const { postId, usernameWhoLiked } = req.body;
      const userLiked = await this.userService.getUser(usernameWhoLiked);
      const updatedPost = await this.userService.addLikeToPost(
        postId,
        userLiked
      );
      res
        .status(202)
        .json({ message: "added like successfully", updatedPost: updatedPost });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }
  async deleteLikeFromPost(req, res) {
    try {
      const { postId, usernameWhoDisliked } = req.body;
      const user = await this.userService.getUser(usernameWhoDisliked);
      const updatedPost = await this.userService.deleteLikeFromPost(
        postId,
        user
      );
      res.status(202).json({
        message: "deleted like successfully",
        updatedPost: updatedPost,
      });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }

  async addCommentToPost(req, res) {
    try {
      const { postId, text, responderName } = req.body;
      const responder = this.userService.getUser(responderName);
      const updatedPost = await this.userService.addCommentToPost(
        postId,
        text,
        responder
      );
      res.status(201).json({
        message: "comment added successfully",
        updatedPost: updatedPost,
      });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }
  async deleteCommentFromPost(req, res) {
    try {
      const { postId, commentId } = req.body;
      const updatedPost = await this.userService.deleteCommentFromPost(
        postId,
        commentId
      );
      res.status(201).json({
        message: "comment deleted successfully",
        updatedPost: updatedPost,
      });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }
  async getUser(req, res) {
    try {
      let { username } = req.params;
      console.log("trying to get user: ", username);
      const user = await this.userService.getUser(username);
      console.log("200 user");
      res.status(200).json({ message: "User fetched successfully", user });
    } catch (error) {
      console.error("Error in controller:", error);
      console.log("500 user");
      res.status(500).json({ message: "Failed to get user", error });
    }
  }
  async getAllUsers(req, res) {
    try {
      const users = await this.userService.getAllUser();
      res.status(200).json({ message: "Users fetched successfully", users });
    } catch (error) {
      console.error("Error in controller:", error);
      console.log("500 users");
      res.status(500).json({ message: "Failed to get users", error });
    }
  }
  async addPostToUser(req, res) {
    try {
      const userId = req.user.id;
      const { photos, description } = req.body;
      const post = await this.userService.addPostToUser(userId, {
        photos,
        description,
      });
      res.status(201).json({
        message: "Post created and added to user successfully!",
        post,
      });
    } catch (error) {
      console.error("Error in controller:", error);
      res.status(500).json({ message: "Failed to add post", error });
    }
  }
  async getPost(req, res) {
    try {
      let { postId } = req.params;
      console.log("trying to get post: ", postId);
      const post = await this.userService.getPost(postId);
      console.log("200 post");
      res.status(200).json({ message: "post fetched successfully", post });
    } catch (error) {
      console.error("Error in controller:", error);
      console.log("500 post");
      res.status(500).json({ message: "Failed to get post", error });
    }
  }
  setRefreshTokenCookie(res, refreshToken) {
    res.cookie("refreshToken", refreshToken, {
      httpOnly: true,
      secure: false,
      sameSite: "Strict",
      path: "/user",
    });
  }
  setAccessToken(res, accessToken) {
    res.setHeader("Authorization", `Bearer ${accessToken}`);
    res.setHeader("Access-Control-Expose-Headers", "Authorization");
  }
  async login(req, res) {
    try {
      const { username, password } = req.body;
      if (!username || !password) {
        return res
          .status(400)
          .json({ message: "Username and password are required" });
      }
      const { accessToken, refreshToken } = await this.userService.login(
        username,
        password
      );
      console.log("User connected: ", username);
      console.log({ accessToken, refreshToken });
      this.setAccessToken(res, accessToken);
      this.setRefreshTokenCookie(res, refreshToken);

      res.status(200).json({ message: "Login successful" });
    } catch (error) {
      console.error("Error during login:", error.message);
      res
        .status(error.statusCode || 500)
        .json({ message: error.message || "An error occurred during login" });
    }
  }

  async authenticateAccessToken(req, res, next) {
    try {
      console.log("**********************************************");
      console.log("AUTHENTICATION STARTED...", req.method, req.originalUrl);
      const authHeader = req.headers["authorization"];
      const accessToken = authHeader && authHeader.split(" ")[1];
      console.log("GOT ACCESS TOKEN: ", accessToken);
      if (!accessToken) {
        return res.status(400).json({ message: "No token was given" });
      }

      req.user = await this.userService.authenticateAccessToken(accessToken);
      console.log("DONE AUTHENTICATION!");
      console.log("**********************************************");
      return next();
    } catch (err) {
      console.log("GOT ERROR DURING AUTHENTICATION: ", err.message);

      if (err.message === process.env.TOKEN_EXPIRED_ERROR) {
        try {
          const { newAccessToken, newRefreshToken } =
            await this.refreshUserToken(req, res);

          res.setHeader("Authorization", `Bearer ${newAccessToken}`);
          res.setHeader("Access-Control-Expose-Headers", "Authorization");

          this.setRefreshTokenCookie(res, newRefreshToken);

          req.user = await this.userService.authenticateAccessToken(
            newAccessToken
          );
          console.log("NEW ACCESS-TOKEN: ", newAccessToken);
          return next();
        } catch (refreshError) {
          console.log("REFRESH TOKEN FAILED:", refreshError.message);
          return res.status(403).json({
            message:
              refreshError.message || "Refresh failed. Please log in again.",
          });
        }
      }

      return res
        .status(403)
        .json({ message: err.message || "Authentication failed" });
    }
  }
  async logout(req, res) {
    try {
      const authHeader = req.headers["authorization"];
      const accessToken = authHeader && authHeader.split(" ")[1];
      console.log("WANT TO EXPIRE ACCESS TOKEN: ", accessToken);
      const refreshToken = req.cookies.refreshToken;
      console.log("WANT TO EXPIRE REFRESH TOKEN: ", refreshToken);
      await this.userService.logout(accessToken, refreshToken);
      res.cookie("refreshToken", " ", {
        httpOnly: true,
        secure: false,
        sameSite: "Strict",
        path: "/user",
        expires: new Date(0),
      });
      res.sendStatus(204);
    } catch (error) {
      res.status(400).json({ message: "cannot logout" });
    }
  }

  async refreshUserToken(req) {
    try {
      console.log("controller refresh");
      const refreshToken = req.cookies.refreshToken;
      console.log("refresh: ", refreshToken);
      if (!refreshToken) {
        throw new Error("No refresh token provided");
      }

      return await this.userService.refreshToken(refreshToken);
    } catch (error) {
      if (error.message === process.env.TOKEN_EXPIRED_ERROR) {
        error.message = process.env.REFRESH_TOKEN_EXPIRED;
      }
      console.log("--------------------------------------\n", error);
      throw error;
    }
  }
}

module.exports = UserController;
