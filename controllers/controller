const redisClient = require("../server");
const UserService = require("../services/userService");

class UserController {
  constructor() {
    this.userService = new UserService(redisClient);
  }

  async signup(req, res) {
    try {
      const {
        username,
        email,
        password,
        birthday,
        bio,
        unit,
        team,
        releaseDay,
        role,
        gender,
      } = req.body;

      let profilePhoto;
      if (req.file) {
        const mimeType = req.file.mimetype; // e.g., 'image/jpeg'
        const base64 = req.file.buffer.toString("base64");
        profilePhoto = `data:${mimeType};base64,${base64}`;
      }

      const userData = {
        username,
        email,
        password,
        birthday,
        bio,
        unit,
        team,
        releaseDay,
        role,
        gender,
        profilePhoto,
      };

      console.log("Saving user:", userData);
      const newUser = await this.userService.signup(userData);
      res
        .status(201)
        .json({ message: "User added successfully", user: newUser });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }
  async getUser(req, res) {
    try {
      let { username } = req.params;
      const user = await this.userService.getUser(username);
      res.status(200).json({ message: "User fetched successfully", user });
    } catch (error) {
      console.error("Error in controller:", error);
      res.status(500).json({ message: "Failed to get user", error });
    }
  }

  async addPostToUser(req, res) {
    try {
      const userId = req.user.id;
      const { photos, description } = req.body;
      const post = await this.userService.addPostToUser(userId, {
        photos,
        description,
      });
      res.status(201).json({
        message: "Post created and added to user successfully!",
        post,
      });
    } catch (error) {
      console.error("Error in controller:", error);
      res.status(500).json({ message: "Failed to add post", error });
    }
  }

  async login(req, res) {
    try {
      const { username, password } = req.body;
      if (!username || !password) {
        return res
          .status(400)
          .json({ message: "Username and password are required" });
      }
      const { accessToken, refreshToken } = await this.userService.login(
        username,
        password
      );
      console.log({ accessToken, refreshToken });
      res.cookie("refreshToken", refreshToken, {
        httpOnly: true,
        secure: false,
        sameSite: "None",
        path: "/",
        maxAge: 1 * 24 * 60 * 60 * 1000,
      });

      res.status(200).json({ message: "Login successful", accessToken });
    } catch (error) {
      console.error("Error during login:", error.message);
      res
        .status(error.statusCode || 500)
        .json({ message: error.message || "An error occurred during login" });
    }
  }

  async authenticateAccessToken(req, res, next) {
    try {
      const authHeader = req.headers["authorization"];
      const accessToken = authHeader && authHeader.split(" ")[1];

      if (!accessToken) {
        return res.status(400).json({ message: "No token was given" });
      }
      req.user = await this.userService.authenticateAccessToken(accessToken);
      next();
    } catch (err) {
      if (err.message === process.env.ACCESS_TOKEN_EXPIRED_ERROR) {
        const refreshResult = await this.refreshUserToken(req, res);

        if (refreshResult.error) {
          return res.status(403).json({
            message: refreshResult.error || "Failed to refresh token",
          });
        }

        const { newAccessToken, newRefreshToken } = refreshResult;

        res.setHeader("Authorization", `Bearer ${newAccessToken}`);

        res.cookie("refreshToken", newRefreshToken, {
          httpOnly: true,
          secure: false,
          sameSite: "Strict",
        });

        req.user = await this.userService.authenticateAccessToken(
          newAccessToken
        );

        next();
      }
      return res
        .status(403)
        .json({ message: err.message || "Authentication failed" });
    }
  }

  async refreshUserToken(req, res) {
    try {
      const refreshToken = req.cookies.refreshToken;
      if (!refreshToken) {
        return res.status(400).json({ message: "No refresh token provided" });
      }

      const { newAccessToken, newRefreshToken } =
        await this.userService.refreshToken(refreshToken);

      return { newAccessToken, newRefreshToken };
    } catch (error) {
      res.status(403).json({
        message: error.message || "Failed to refresh token",
      });
    }
  }
}

module.exports = UserController;
