const redisClient = require("../server"); 
const UserService = require("../services/userService");

class UserController {

  constructor() {
    this.userService = new UserService(redisClient); 
  }

  async signup(req, res) {
    try {
      const { username, email, password, birthday } = req.body;
      const userData = { username, email, password, birthday };
      console.log(userData);
      const newUser = await this.userService.signup(userData);
      res.status(201).json({ message: "User added successfully", user: newUser });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }
  
  async getAll(req, res) {
    try {
      const users = await this.userService.getAll();
      res.status(200).json({ message: "Users fetched successfully", users });
    } catch (error) {
      console.error("Error in controller:", error);
      res.status(500).json({ message: "Failed to get users", error });
    }
  }
  
  async addPostToUser(req, res) {
    try {
      const userId = req.params.userId;
      const { photos, description } = req.body;
      const post = await this.userService.addPostToUser(userId, { photos, description });
      res.status(201).json({
        message: "Post created and added to user successfully!",
        post,
      });
    } catch (error) {
      console.error("Error in controller:", error);
      res.status(500).json({ message: "Failed to add post", error });
    }
  }

  async login(req, res) {
    try {
      const { username, password } = req.body;
      if (!username || !password) {
        return res.status(400).json({ message: "Username and password are required" });
      }
      const { accessToken, refreshToken } = await this.userService.login(username, password);
      console.log({ accessToken, refreshToken });

      res.status(200).json({ message: "Login successful", accessToken, refreshToken });
    } catch (error) {
      console.error("Error during login:", error.message);
      res.status(error.statusCode || 500).json({ message: error.message || "An error occurred during login" });
    }
  }

  async authenticateAccessToken(req, res, next) {
    try {
      const authHeader = req.headers["authorization"];
      const accessToken = authHeader && authHeader.split(" ")[1];
      if (!accessToken) {
        return res.status(400).json({ message: "No token was given" });
      }
      req.user = await this.userService.authenticateAccessToken(accessToken);
      next();
    } catch (err) {
      return res.status(403).json({ message: err.message || "Authentication failed" });
    }
  }

  async refreshUserToken(req, res) {
    try {
      const authHeader = req.headers["authorization"];
      const refreshToken = authHeader && authHeader.split(" ")[1];
      if (!refreshToken) {
        return res.status(400).json({ message: "No token was given" });
      }
      const { newAccessToken, newRefreshToken } = await this.userService.refreshToken(refreshToken);
      res.status(200).json({
        message: "Refreshed successfully",
        accessToken: newAccessToken,
        refreshToken: newRefreshToken,
      });
    } catch (error) {
      res.status(500).json({ message: error.message || "Failed to refresh token" });
    }
  }
}

module.exports = UserController;
